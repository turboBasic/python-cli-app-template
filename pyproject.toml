[build-system]
build-backend = "hatchling.build"
requires = [
    "hatch-vcs",
    "hatchling",
]

[project]
authors = [
    { email = "andrii7melnyk@proton.me", name = "Andrii Melnyk ⚡️" },
]
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
]
dependencies = [
    "dynaconf",
    "sympy",
    "typer",
]
description = "Python CLI app template project featuring the modern and extensible Python project manager hatch."
dynamic = [
    "version",
]
keywords = [
    "hatch",
    "typer",
]
name = "python-cli-app-template"
readme = "README.md"
requires-python = ">=3.11"

[project.license]
text = "MIT"

[project.scripts]
pca = "python_cli_app_template.cli.main:app"

[project.urls]
Documentation = "https://turbobasic.github.io/python-cli-app-template"
Source = "https://github.com/turboBasic/python-cli-app-template"
Tracker = "https://github.com/turboBasic/python-cli-app-template/issues"

[tool.coverage.paths]
source = [
    "*/site-packages/",
    "src/",
]

[tool.coverage.report]
exclude_lines = [
    "def __repr__",
    "if 0:",
    "if TYPE_CHECKING:",
    "if __name__ == .__main__.:",
    "if self\\.debug",
    "pragma: no cover",
    "raise AssertionError",
    "raise NotImplementedError",
]

[tool.coverage.run]
branch = true
omit = [
    "_version.py",
]
source = [
    "src/python_cli_app_template",
]

[tool.hatch.build]
packages = [
    "src/python_cli_app_template",
]

[tool.hatch.build.hooks.vcs]
version-file = "src/python_cli_app_template/_version.py"

[tool.hatch.build.targets.sdist]
exclude = [
    "/.github",
]

[tool.hatch.env]
requires = [
    "hatch-pip-compile~=1.11.3",
]

[tool.hatch.envs.default]
dependencies = []
lock-filename = "locks/{env_name}.lock"
pip-compile-constraint = "default"
pip-compile-hashes = false
post-install-commands = [
    "pre-commit install",
]
python = "3.11"
type = "pip-compile"

[tool.hatch.envs.default.scripts]
upgrade-all = "PIP_COMPILE_UPGRADE=1 hatch env run --env {env_name} -- python --version"
upgrade-pkg = "PIP_COMPILE_UPGRADE_PACKAGE='{args}' hatch env run --env {env_name} -- python --version"

[tool.hatch.envs.docs]
dependencies = [
    "linkchecker",
    "mike~=2.1",
    "mkdocs-gen-files",
    "mkdocs-git-revision-date-localized-plugin~=1.2",
    "mkdocs-glightbox~=0.4.0",
    "mkdocs-include-markdown-plugin",
    "mkdocs-literate-nav",
    "mkdocs-material[imaging]~=9.4",
    "mkdocs-minify-plugin~=0.8",
    "mkdocs-redirects~=1.2",
    "mkdocs-section-index",
    "mkdocstrings[python]",
    "mkdocs~=1.6",
    "pygments~=2.18",
    "pymdown-extensions~=10.9",
]

[tool.hatch.envs.docs.env-vars]
MKDOCS_CONFIG = "mkdocs.yml"
PYTHONUNBUFFERED = "1"
SOURCE_DATE_EPOCH = "1580601600"

[tool.hatch.envs.docs.scripts]
build = "mkdocs build --config-file {env:MKDOCS_CONFIG} --clean --strict {args}"
build-check = [
    "build",
    "validate",
]
ci-build = "mike deploy --config-file {env:MKDOCS_CONFIG} --update-aliases {args}"
serve = "mkdocs serve --config-file {env:MKDOCS_CONFIG} --dev-addr localhost:8000 {args}"
validate = "linkchecker --config .linkcheckerrc --ignore-url=/reference --ignore-url=None site"

[tool.hatch.envs.lint]
dependencies = [
    "mypy==1.11.2",
    "ruff==0.6.5",
]
template = "lint"

[tool.hatch.envs.lint.scripts]
all = [
    "style",
    "typing",
]
fix = [
    "ruff check --fix {args:.}",
    "ruff format {args:.}",
    "style",
]
style = [
    "echo \"VERSION: `ruff --version`\"",
    "ruff check {args:.}",
    "ruff format --check {args:.}",
]
typing = [
    "echo \"VERSION: `mypy --version`\"",
    "mypy --install-types --non-interactive {args}",
]

[[tool.hatch.envs.py-test.matrix]]
python = [
    "311",
    "312",
]
template = [
    "test",
]

[tool.hatch.envs.test]
dependencies = [
    "coverage[toml]>=7.6",
    "hypothesis",
    "ipython",
    "jupyterlab",
    "pandas",
    "pyfakefs",
    "pytest",
    "pytest-cov",
    "pytest-mock",
    "pytest-sugar",
    "pytest-vcr",
    "seaborn",
]
path = ".venv"
type = "virtual"

[tool.hatch.envs.test.scripts]
cov = "pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=src/python_cli_app_template --cov=tests {args}"
debug = "cov --no-cov --capture=no --pdb --pdbcls=IPython.core.debugger:Pdb {args}"
no-cov = "cov --no-cov {args}"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.version]
source = "vcs"

[tool.hatch.version.raw-options]
version_scheme = "no-guess-dev"

[tool.mypy]
disallow_untyped_defs = false
files = [
    "src/python_cli_app_template",
    "tests",
]
follow_imports = "normal"
ignore_missing_imports = true
pretty = true
show_column_numbers = true
warn_no_return = false
warn_unused_ignores = true

[tool.pytest.ini_options]
addopts = "-ra --quiet --doctest-glob='*.md'"
minversion = "8.0"
testpaths = [
    "tests",
]

[tool.ruff]
include = [
    "src/**/*.py",
    "src/**/*.pyi",
    "tests/**/*.py",
    "tests/**/*.pyi",
]
indent-width = 4
line-length = 120
target-version = "py311"

[tool.ruff.format]
quote-style = "single"

[tool.ruff.lint]
extend-select = [
    "W292",
]
ignore = [
    "B027",
    "C901",
    "E203",
    "FBT003",
    "ISC001",
    "PLC1901",
    "PLR0911",
    "PLR0912",
    "PLR0913",
    "PLR0915",
    "PLW2901",
    "S105",
    "S106",
    "S107",
    "SIM114",
]
preview = true
select = [
    "A",
    "B",
    "C",
    "DTZ",
    "E",
    "EM",
    "F",
    "FBT",
    "I",
    "ICN",
    "ISC",
    "N",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "Q",
    "RUF",
    "RUF100",
    "S",
    "SIM",
    "T",
    "TID",
    "UP",
    "W",
    "YTT",
]
unfixable = []

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.isort]
known-first-party = [
    "python_cli_app_template",
]

[tool.ruff.lint.per-file-ignores]
"examples/*" = [
    "T201",
]
"tests/**/*" = [
    "PLC0415",
    "PLR2004",
    "S101",
    "TID252",
]
